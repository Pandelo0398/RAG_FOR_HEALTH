"""
Demostraci√≥n Mejorada del Sistema RAG M√©dico con LlamaIndex
"""

import asyncio
import json
from datetime import datetime
from typing import List, Dict, Any

from .medical_system_enhanced import EnhancedMedicalRAGSystem
from ..models.document import DocumentType


class EnhancedMedicalDemo:
    """Demostraci√≥n completa del sistema RAG m√©dico mejorado"""
    
    def __init__(self):
        """Inicializar demostraci√≥n"""
        
        self.system = None
        self.demo_data = self._load_demo_data()
    
    def _load_demo_data(self) -> Dict[str, Any]:
        """Cargar datos de demostraci√≥n"""
        
        return {
            "medical_documents": [
                {
                    "title": "Protocolo de Tratamiento - Diabetes Mellitus",
                    "text": """
                    DIABETES MELLITUS TIPO 2 - PROTOCOLO DE TRATAMIENTO
                    
                    CRITERIOS DIAGN√ìSTICOS:
                    - Glucemia en ayunas ‚â• 126 mg/dL
                    - Glucemia postprandial ‚â• 200 mg/dL
                    - Hemoglobina glicosilada ‚â• 6.5%
                    
                    TRATAMIENTO FARMACOL√ìGICO:
                    1. Metformina: 500-2000 mg/d√≠a (primera l√≠nea)
                    2. Sulfonilureas: Glibenclamida, Gliclazida
                    3. Inhibidores DPP-4: Sitagliptina, Vildagliptina
                    4. Agonistas GLP-1: Liraglutida, Dulaglutida
                    5. Inhibidores SGLT2: Empagliflozina, Dapagliflozina
                    
                    SEGUIMIENTO:
                    - Control gluc√©mico cada 3 meses
                    - Hemoglobina glicosilada objetivo < 7%
                    - Evaluaci√≥n de complicaciones anual
                    
                    COMPLICACIONES:
                    - Retinopat√≠a diab√©tica
                    - Nefropat√≠a diab√©tica
                    - Neuropat√≠a diab√©tica
                    - Enfermedad cardiovascular
                    """,
                    "type": DocumentType.TREATMENT,
                    "service": "Endocrinolog√≠a"
                },
                {
                    "title": "Gu√≠a Cl√≠nica - Hipertensi√≥n Arterial",
                    "text": """
                    HIPERTENSI√ìN ARTERIAL - GU√çA CL√çNICA
                    
                    DEFINICI√ìN:
                    Presi√≥n arterial sist√≥lica ‚â• 140 mmHg y/o diast√≥lica ‚â• 90 mmHg
                    
                    CLASIFICACI√ìN:
                    - Normal: < 120/80 mmHg
                    - Prehipertensi√≥n: 120-139/80-89 mmHg
                    - Hipertensi√≥n Estadio 1: 140-159/90-99 mmHg
                    - Hipertensi√≥n Estadio 2: ‚â• 160/100 mmHg
                    
                    TRATAMIENTO:
                    1. Modificaciones del estilo de vida
                    2. Inhibidores de la ECA: Enalapril, Lisinopril
                    3. Antagonistas de receptores de angiotensina: Losart√°n, Valsart√°n
                    4. Bloqueadores de canales de calcio: Amlodipino, Nifedipino
                    5. Diur√©ticos tiaz√≠dicos: Hidroclorotiazida
                    
                    OBJETIVOS DE TRATAMIENTO:
                    - < 140/90 mmHg en poblaci√≥n general
                    - < 130/80 mmHg en diab√©ticos y enfermedad renal
                    """,
                    "type": DocumentType.TREATMENT,
                    "service": "Cardiolog√≠a"
                },
                {
                    "title": "Caso Cl√≠nico - Infarto Agudo de Miocardio",
                    "text": """
                    CASO CL√çNICO: INFARTO AGUDO DE MIOCARDIO
                    
                    PACIENTE: Var√≥n de 65 a√±os
                    ANTECEDENTES: Hipertensi√≥n arterial, diabetes mellitus tipo 2
                    
                    CL√çNICA:
                    - Dolor tor√°cico opresivo de 2 horas de evoluci√≥n
                    - Irradiaci√≥n a brazo izquierdo y mand√≠bula
                    - Sudoraci√≥n profusa y n√°useas
                    
                    EXPLORACI√ìN:
                    - TA: 180/110 mmHg
                    - FC: 95 lpm, r√≠tmico
                    - Auscultaci√≥n: S4, sin soplos
                    
                    ECG:
                    - Elevaci√≥n del segmento ST en cara anterior
                    - Ondas Q patol√≥gicas en V1-V4
                    
                    DIAGN√ìSTICO:
                    Infarto agudo de miocardio con elevaci√≥n del segmento ST (IAMCEST)
                    de cara anterior
                    
                    TRATAMIENTO INMEDIATO:
                    1. Aspirina 300 mg
                    2. Clopidogrel 600 mg
                    3. Heparina no fraccionada
                    4. Angioplastia primaria
                    
                    EVOLUCI√ìN:
                    Reperfusi√≥n exitosa con stent en arteria descendente anterior
                    """,
                    "type": DocumentType.DIAGNOSIS,
                    "service": "Cardiolog√≠a"
                }
            ],
            "test_queries": [
                "¬øCu√°l es el tratamiento de primera l√≠nea para diabetes mellitus tipo 2?",
                "¬øCu√°les son los criterios diagn√≥sticos de hipertensi√≥n arterial?",
                "¬øQu√© complicaciones puede tener un paciente diab√©tico?",
                "¬øCu√°l es el manejo inicial del infarto agudo de miocardio?",
                "¬øQu√© medicamentos se usan para tratar la hipertensi√≥n arterial?"
            ],
            "patient_scenarios": [
                {
                    "age": 58,
                    "sex": "Femenino",
                    "diagnosis": "Paciente con diabetes mellitus tipo 2 de 5 a√±os de evoluci√≥n, mal controlada con hemoglobina glicosilada de 8.5%",
                    "query": "¬øQu√© tratamiento farmacol√≥gico recomiendas para mejorar el control gluc√©mico?"
                },
                {
                    "age": 72,
                    "sex": "Masculino",
                    "diagnosis": "Paciente hipertenso con presi√≥n arterial de 160/95 mmHg y antecedentes de diabetes",
                    "query": "¬øCu√°l es el objetivo de presi√≥n arterial y qu√© medicamentos son m√°s apropiados?"
                }
            ]
        }
    
    async def run_enhanced_demo(self):
        """Ejecutar demostraci√≥n completa del sistema mejorado"""
        
        print("üöÄ INICIANDO DEMOSTRACI√ìN MEJORADA DEL SISTEMA RAG M√âDICO")
        print("=" * 80)
        
        # 1. Inicializar sistema mejorado
        await self._initialize_enhanced_system()
        
        # 2. Cargar documentos m√©dicos
        await self._load_medical_documents()
        
        # 3. Demostrar capacidades b√°sicas
        await self._demonstrate_basic_capabilities()
        
        # 4. Demostrar agentes especializados
        await self._demonstrate_agents()
        
        # 5. Demostrar evaluaci√≥n de calidad
        await self._demonstrate_evaluation()
        
        # 6. Demostrar casos cl√≠nicos complejos
        await self._demonstrate_clinical_cases()
        
        # 7. Mostrar estad√≠sticas finales
        await self._show_final_statistics()
        
        print("\n‚úÖ DEMOSTRACI√ìN COMPLETADA EXITOSAMENTE")
    
    async def _initialize_enhanced_system(self):
        """Inicializar sistema mejorado"""
        
        print("\nüîß 1. INICIALIZANDO SISTEMA MEJORADO")
        print("-" * 50)
        
        try:
            self.system = EnhancedMedicalRAGSystem(
                use_llama_index=True,
                enable_agents=True,
                enable_evaluation=True
            )
            
            # Verificar caracter√≠sticas disponibles
            features = self.system.get_available_features()
            print("‚úÖ Caracter√≠sticas disponibles:")
            for feature, available in features.items():
                status = "‚úÖ" if available else "‚ùå"
                print(f"   {status} {feature}")
            
            # Test de salud del sistema
            health = await self.system.test_system_health_enhanced()
            print(f"\nüè• Estado del sistema: {'‚úÖ SALUDABLE' if health['system_healthy'] else '‚ùå PROBLEMAS'}")
            
        except Exception as e:
            print(f"‚ùå Error inicializando sistema: {e}")
            raise
    
    async def _load_medical_documents(self):
        """Cargar documentos m√©dicos de demostraci√≥n"""
        
        print("\nüìö 2. CARGANDO DOCUMENTOS M√âDICOS")
        print("-" * 50)
        
        for i, doc in enumerate(self.demo_data["medical_documents"], 1):
            try:
                doc_id = await self.system.add_medical_document_enhanced(
                    text=doc["text"],
                    document_type=doc["type"],
                    title=doc["title"],
                    service=doc["service"]
                )
                
                print(f"‚úÖ Documento {i} cargado: {doc['title']}")
                print(f"   ID: {doc_id}")
                print(f"   Tipo: {doc['type'].value}")
                print(f"   Servicio: {doc['service']}")
                
            except Exception as e:
                print(f"‚ùå Error cargando documento {i}: {e}")
    
    async def _demonstrate_basic_capabilities(self):
        """Demostrar capacidades b√°sicas del sistema"""
        
        print("\nüîç 3. DEMOSTRANDO CAPACIDADES B√ÅSICAS")
        print("-" * 50)
        
        # B√∫squeda de documentos
        print("\nüìñ B√∫squeda de documentos m√©dicos:")
        search_results = self.system.search_medical_documents_enhanced(
            query="tratamiento diabetes",
            top_k=3
        )
        
        print(f"Encontrados {len(search_results)} documentos relevantes:")
        for i, result in enumerate(search_results[:2], 1):
            print(f"   {i}. Similitud: {result['similarity_score']:.3f}")
            print(f"      Texto: {result['text'][:100]}...")
            print(f"      Tipo: {result['metadata'].get('document_type', 'N/A')}")
        
        # Procesamiento de diagn√≥stico b√°sico
        print("\nüè• Procesamiento de diagn√≥stico b√°sico:")
        diagnosis_result = await self.system.process_diagnosis_enhanced(
            text="Paciente con diabetes mellitus tipo 2 mal controlada",
            patient_age=65,
            patient_sex="Masculino",
            service="Endocrinolog√≠a",
            use_agents=False,
            evaluate_response=True
        )
        
        print(f"‚úÖ Diagn√≥stico procesado en {diagnosis_result.processing_time:.2f}s")
        print(f"   Confianza: {diagnosis_result.confidence_score:.3f}")
        print(f"   An√°lisis: {diagnosis_result.diagnosis_analysis[:200]}...")
    
    async def _demonstrate_agents(self):
        """Demostrar sistema de agentes especializados"""
        
        print("\nü§ñ 4. DEMOSTRANDO AGENTES ESPECIALIZADOS")
        print("-" * 50)
        
        # Agente de diagn√≥stico
        print("\nüî¨ Agente de Diagn√≥stico:")
        diagnosis_agent_result = await self.system.query_with_agent(
            query="Analiza este caso: paciente de 70 a√±os con dolor tor√°cico y presi√≥n alta",
            agent_type="diagnosis",
            patient_context={"age": 70, "symptoms": ["dolor tor√°cico", "presi√≥n alta"]}
        )
        
        if "error" not in diagnosis_agent_result:
            print("‚úÖ Respuesta del agente de diagn√≥stico:")
            print(f"   {diagnosis_agent_result['response'][:300]}...")
        else:
            print(f"‚ùå Error con agente de diagn√≥stico: {diagnosis_agent_result['error']}")
        
        # Agente de tratamiento
        print("\nüíä Agente de Tratamiento:")
        treatment_agent_result = await self.system.query_with_agent(
            query="Sugiere tratamiento para diabetes mellitus tipo 2",
            agent_type="treatment",
            patient_context={"diagnosis": "diabetes mellitus tipo 2"}
        )
        
        if "error" not in treatment_agent_result:
            print("‚úÖ Respuesta del agente de tratamiento:")
            print(f"   {treatment_agent_result['response'][:300]}...")
        else:
            print(f"‚ùå Error con agente de tratamiento: {treatment_agent_result['error']}")
    
    async def _demonstrate_evaluation(self):
        """Demostrar sistema de evaluaci√≥n"""
        
        print("\nüìä 5. DEMOSTRANDO SISTEMA DE EVALUACI√ìN")
        print("-" * 50)
        
        # Evaluar respuestas de prueba
        test_queries = self.demo_data["test_queries"][:3]
        
        print(f"\nüîç Evaluando {len(test_queries)} consultas de prueba:")
        
        evaluation_result = await self.system.evaluate_system_performance(test_queries)
        
        if "error" not in evaluation_result:
            stats = evaluation_result.get("system_evaluation", {}).get("batch_statistics", {})
            print(f"‚úÖ Resultados de evaluaci√≥n:")
            print(f"   Score promedio: {stats.get('average_score', 0):.3f}")
            print(f"   Score m√≠nimo: {stats.get('min_score', 0):.3f}")
            print(f"   Score m√°ximo: {stats.get('max_score', 0):.3f}")
            
            distribution = stats.get('quality_distribution', {})
            print(f"   Distribuci√≥n de calidad:")
            for quality, count in distribution.items():
                if count > 0:
                    print(f"     {quality}: {count}")
        else:
            print(f"‚ùå Error en evaluaci√≥n: {evaluation_result['error']}")
    
    async def _demonstrate_clinical_cases(self):
        """Demostrar casos cl√≠nicos complejos"""
        
        print("\nüë®‚Äç‚öïÔ∏è 6. DEMOSTRANDO CASOS CL√çNICOS COMPLEJOS")
        print("-" * 50)
        
        for i, scenario in enumerate(self.demo_data["patient_scenarios"], 1):
            print(f"\nüìã Caso Cl√≠nico {i}:")
            print(f"   Paciente: {scenario['age']} a√±os, {scenario['sex']}")
            print(f"   Diagn√≥stico: {scenario['diagnosis']}")
            print(f"   Consulta: {scenario['query']}")
            
            # Procesar con agentes
            result = await self.system.process_diagnosis_enhanced(
                text=scenario['diagnosis'],
                patient_age=scenario['age'],
                patient_sex=scenario['sex'],
                use_agents=True,
                evaluate_response=True
            )
            
            print(f"‚úÖ Respuesta del sistema:")
            print(f"   Tiempo: {result.processing_time:.2f}s")
            print(f"   Confianza: {result.confidence_score:.3f}")
            print(f"   An√°lisis: {result.diagnosis_analysis[:200]}...")
            
            if result.treatment_suggestions:
                print(f"   Tratamiento: {result.treatment_suggestions[:200]}...")
    
    async def _show_final_statistics(self):
        """Mostrar estad√≠sticas finales"""
        
        print("\nüìà 7. ESTAD√çSTICAS FINALES DEL SISTEMA")
        print("-" * 50)
        
        stats = self.system.get_system_stats_enhanced()
        
        print("üìä Estad√≠sticas del sistema:")
        system_stats = stats.get("system", {})
        print(f"   Documentos procesados: {system_stats.get('documents_processed', 0)}")
        print(f"   Diagn√≥sticos procesados: {system_stats.get('diagnoses_processed', 0)}")
        print(f"   Consultas con agentes: {system_stats.get('agent_queries', 0)}")
        print(f"   Evaluaciones realizadas: {system_stats.get('evaluations_performed', 0)}")
        
        # Estad√≠sticas de LlamaIndex
        if "llama_index" in stats:
            llama_stats = stats["llama_index"]
            print(f"\nüîß Estad√≠sticas de LlamaIndex:")
            index_stats = llama_stats.get("index", {})
            print(f"   Nodos totales: {index_stats.get('total_nodes', 0)}")
            print(f"   Modelo de embeddings: {index_stats.get('embedding_model', 'N/A')}")
            print(f"   Vector store: {index_stats.get('vector_store_type', 'N/A')}")
        
        # Estad√≠sticas de agentes
        if "agents" in stats:
            agent_stats = stats["agents"]
            print(f"\nü§ñ Estad√≠sticas de Agentes:")
            print(f"   Agentes disponibles: {agent_stats.get('total_agents', 0)}")
            print(f"   Herramientas disponibles: {agent_stats.get('total_tools', 0)}")
        
        # Estad√≠sticas de evaluaci√≥n
        if "evaluation" in stats:
            eval_stats = stats["evaluation"]
            print(f"\nüìä Estad√≠sticas de Evaluaci√≥n:")
            print(f"   Evaluaciones totales: {eval_stats.get('total_evaluations', 0)}")
            print(f"   Score promedio: {eval_stats.get('overall_average_score', 0):.3f}")
    
    async def run_quick_test(self):
        """Ejecutar prueba r√°pida del sistema"""
        
        print("‚ö° PRUEBA R√ÅPIDA DEL SISTEMA RAG M√âDICO")
        print("=" * 50)
        
        try:
            # Inicializar sistema
            self.system = EnhancedMedicalRAGSystem(
                use_llama_index=True,
                enable_agents=False,  # Deshabilitar para prueba r√°pida
                enable_evaluation=False
            )
            
            # Cargar un documento
            doc = self.demo_data["medical_documents"][0]
            await self.system.add_medical_document_enhanced(
                text=doc["text"],
                document_type=doc["type"],
                title=doc["title"]
            )
            
            # Procesar una consulta
            result = await self.system.process_diagnosis_enhanced(
                text="¬øCu√°l es el tratamiento de la diabetes?",
                use_agents=False
            )
            
            print(f"‚úÖ Prueba exitosa:")
            print(f"   Respuesta: {result.diagnosis_analysis[:100]}...")
            print(f"   Confianza: {result.confidence_score:.3f}")
            
        except Exception as e:
            print(f"‚ùå Error en prueba r√°pida: {e}")


async def main():
    """Funci√≥n principal para ejecutar la demostraci√≥n"""
    
    demo = EnhancedMedicalDemo()
    
    # Ejecutar demostraci√≥n completa o prueba r√°pida
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == "quick":
        await demo.run_quick_test()
    else:
        await demo.run_enhanced_demo()


if __name__ == "__main__":
    asyncio.run(main()) 